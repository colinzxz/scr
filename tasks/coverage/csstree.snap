Csstree Summary:
AST Parsed: 0/581 (0.00%)
Except to Parse: "selector/ClassSelector.json" -> "basic class selector"
Except to Parse: "selector/ClassSelector.json" -> "escaped class selector #1"
Except to Parse: "selector/ClassSelector.json" -> "escaped class selector #2"
Except to Parse: "selector/ClassSelector.json" -> "escaped class selector #3"
Except to Parse: "selector/ClassSelector.json" -> "escaped class selector #4"
Except to Parse: "selector/ClassSelector.json" -> "escaped class selector #5"
Except to Parse: "selector/ClassSelector.json" -> "start with dash"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with dashmatch"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with dashmatch and spaces"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with flags"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with flags and comments"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with flags and spaces"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with namespace and dashmatch"
Except to Parse: "selector/AttributeSelector.json" -> "attrib with namespace, dashmatch and spaces"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.0"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.1"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.1 with flags"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.1 with flags and spaces"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.2"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.2 with flags"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.c.0"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.c.1"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.c.1 with flags and comments"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.s.0"
Except to Parse: "selector/AttributeSelector.json" -> "attrib.s.1"
Except to Parse: "selector/AttributeSelector.json" -> "attrselector $="
Except to Parse: "selector/AttributeSelector.json" -> "attrselector *="
Except to Parse: "selector/AttributeSelector.json" -> "attrselector ="
Except to Parse: "selector/AttributeSelector.json" -> "attrselector ^="
Except to Parse: "selector/AttributeSelector.json" -> "attrselector |="
Except to Parse: "selector/AttributeSelector.json" -> "attrselector ~="
Except to Parse: "selector/AttributeSelector.json" -> "namespace"
Except to Parse: "selector/AttributeSelector.json" -> "namespace unversal"
Except to Parse: "selector/AttributeSelector.json" -> "namespace unversal w/o attrselector"
Except to Parse: "selector/AttributeSelector.json" -> "namespace w/o attrselector"
Except to Parse: "selector/AttributeSelector.json" -> "namespaced starting with dash"
Except to Parse: "selector/AttributeSelector.json" -> "no namespace"
Except to Parse: "selector/AttributeSelector.json" -> "no namespace w/o attrselector"
Except to Parse: "selector/AttributeSelector.json" -> "starting with dash"
Except to Parse: "selector/Selector.json" -> "negation with identifier and attribute selector"
Except to Parse: "selector/Selector.json" -> "negation with namespaced identifier"
Except to Parse: "selector/Selector.json" -> "simpleselector.0"
Except to Parse: "selector/Selector.json" -> "simpleselector.1"
Except to Parse: "selector/Selector.json" -> "simpleselector.16"
Except to Parse: "selector/Selector.json" -> "simpleselector.18"
Except to Parse: "selector/Selector.json" -> "simpleselector.2"
Except to Parse: "selector/Selector.json" -> "simpleselector.3"
Except to Parse: "selector/Selector.json" -> "simpleselector.4"
Except to Parse: "selector/Selector.json" -> "spaces"
Except to Parse: "selector/Selector.json" -> "type & id"
Except to Parse: "selector/PseudoElementSelector.json" -> "functional pseudo element"
Except to Parse: "selector/PseudoElementSelector.json" -> "pseudo element #0"
Except to Parse: "selector/PseudoElementSelector.json" -> "pseudo element #1"
Except to Parse: "selector/PseudoElementSelector.json" -> "pseudo element ::before"
Except to Parse: "selector/Nth.json" -> "+n"
Except to Parse: "selector/Nth.json" -> "big numbers"
Except to Parse: "selector/Nth.json" -> "even keyword"
Except to Parse: "selector/Nth.json" -> "even keyword should be case insensitive"
Except to Parse: "selector/Nth.json" -> "nth-child"
Except to Parse: "selector/Nth.json" -> "nth-child case insensetive"
Except to Parse: "selector/Nth.json" -> "nth-last-child"
Except to Parse: "selector/Nth.json" -> "nth-last-child case insensetive"
Except to Parse: "selector/Nth.json" -> "nth-last-of-type"
Except to Parse: "selector/Nth.json" -> "nth-last-of-type case insensetive"
Except to Parse: "selector/Nth.json" -> "nth-of-type"
Except to Parse: "selector/Nth.json" -> "nth-of-type case insensetive"
Except to Parse: "selector/Nth.json" -> "nth.0"
Except to Parse: "selector/Nth.json" -> "nth.1"
Except to Parse: "selector/Nth.json" -> "nth.4"
Except to Parse: "selector/Nth.json" -> "nth.5"
Except to Parse: "selector/Nth.json" -> "nthselector.0 case insensitive"
Except to Parse: "selector/Nth.json" -> "nthselector.1"
Except to Parse: "selector/Nth.json" -> "nthselector.c.0"
Except to Parse: "selector/Nth.json" -> "nthselector.c.1"
Except to Parse: "selector/Nth.json" -> "nthselector.s.0"
Except to Parse: "selector/Nth.json" -> "nthselector.s.1"
Except to Parse: "selector/Nth.json" -> "odd keyword"
Except to Parse: "selector/Nth.json" -> "odd keyword be case insensitive"
Except to Parse: "selector/Nth.json" -> "of clause"
Except to Parse: "selector/IdSelector.json" -> "shash.0"
Except to Parse: "selector/IdSelector.json" -> "shash.1"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudo element :after"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudo element :before"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudo element :before case insesitive"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudo element :first-letter"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudo element :first-line"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudoc.0"
Except to Parse: "selector/PseudoClassSelector.json" -> "pseudoc.1"
Except to Parse: "selector/PseudoClassSelector.json" -> "unknown function pseudo class"
Except to Parse: "selector/PseudoClassSelector.json" -> "unknown function pseudo class with nested blocks"
Except to Parse: "selector/PseudoClassSelector.json" -> "unknown function pseudo class with nested blocks (unbalanced parenthesis)"
Except to Parse: "selector/PseudoClassSelector.json" -> "unknown function pseudo class with spaces and comments"
Except to Parse: "selector/TypeSelector.json" -> "base test"
Except to Parse: "selector/TypeSelector.json" -> "starting with dash"
Except to Parse: "selector/TypeSelector.json" -> "starting with dash #2"
Except to Parse: "selector/TypeSelector.json" -> "starting with underscore"
Except to Parse: "selector/TypeSelector.json" -> "universal"
Except to Parse: "selector/functional-pseudo/dir.json" -> "basic"
Except to Parse: "selector/functional-pseudo/dir.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/dir.json" -> "with spaces and comments"
Except to Parse: "selector/functional-pseudo/is.json" -> "basic"
Except to Parse: "selector/functional-pseudo/is.json" -> "negation with selector group"
Except to Parse: "selector/functional-pseudo/is.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/is.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/is.json" -> "should support relative selectors"
Except to Parse: "selector/functional-pseudo/-moz-any.json" -> "basic"
Except to Parse: "selector/functional-pseudo/-moz-any.json" -> "negation with selector group"
Except to Parse: "selector/functional-pseudo/-moz-any.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/-moz-any.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/-moz-any.json" -> "should support relative selectors"
Except to Parse: "selector/functional-pseudo/host.json" -> "basic"
Except to Parse: "selector/functional-pseudo/host.json" -> "empty argument"
Except to Parse: "selector/functional-pseudo/host.json" -> "no argument"
Except to Parse: "selector/functional-pseudo/host.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/host.json" -> "spaces around selector"
Except to Parse: "selector/functional-pseudo/not.json" -> "basic"
Except to Parse: "selector/functional-pseudo/not.json" -> "selector group"
Except to Parse: "selector/functional-pseudo/not.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/not.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/lang.json" -> "basic"
Except to Parse: "selector/functional-pseudo/lang.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/lang.json" -> "with spaces and comments"
Except to Parse: "selector/functional-pseudo/where.json" -> "basic"
Except to Parse: "selector/functional-pseudo/where.json" -> "negation with selector group"
Except to Parse: "selector/functional-pseudo/where.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/where.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/where.json" -> "should support relative selectors"
Except to Parse: "selector/functional-pseudo/-webkit-any.json" -> "basic"
Except to Parse: "selector/functional-pseudo/-webkit-any.json" -> "negation with selector group"
Except to Parse: "selector/functional-pseudo/-webkit-any.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/-webkit-any.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/-webkit-any.json" -> "should support relative selectors"
Except to Parse: "selector/functional-pseudo/matches.json" -> "basic"
Except to Parse: "selector/functional-pseudo/matches.json" -> "selector group"
Except to Parse: "selector/functional-pseudo/matches.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/matches.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/slotted.json" -> "basic"
Except to Parse: "selector/functional-pseudo/slotted.json" -> "empty argument"
Except to Parse: "selector/functional-pseudo/slotted.json" -> "no argument"
Except to Parse: "selector/functional-pseudo/slotted.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/slotted.json" -> "spaces around selector"
Except to Parse: "selector/functional-pseudo/host-context.json" -> "basic"
Except to Parse: "selector/functional-pseudo/host-context.json" -> "empty argument"
Except to Parse: "selector/functional-pseudo/host-context.json" -> "no argument"
Except to Parse: "selector/functional-pseudo/host-context.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/host-context.json" -> "spaces around selector"
Except to Parse: "selector/functional-pseudo/has.json" -> "basic"
Except to Parse: "selector/functional-pseudo/has.json" -> "empty argument"
Except to Parse: "selector/functional-pseudo/has.json" -> "negation with selector group"
Except to Parse: "selector/functional-pseudo/has.json" -> "no argument"
Except to Parse: "selector/functional-pseudo/has.json" -> "selector group and spaces"
Except to Parse: "selector/functional-pseudo/has.json" -> "should be case insensitive"
Except to Parse: "selector/functional-pseudo/has.json" -> "should support relative selectors"
Except to Parse: "selector/Combinator.json" -> "all selectors"
Except to Parse: "selector/Combinator.json" -> "child combinator"
Except to Parse: "selector/Combinator.json" -> "combinator with comments around #0"
Except to Parse: "selector/Combinator.json" -> "combinator with comments around #1"
Except to Parse: "selector/Combinator.json" -> "combinator with comments around #2"
Except to Parse: "selector/Combinator.json" -> "combinator with comments around #3"
Except to Parse: "selector/Combinator.json" -> "combinator with comments around #4"
Except to Parse: "selector/Combinator.json" -> "combinator with spaces around #0"
Except to Parse: "selector/Combinator.json" -> "combinator with spaces around #1"
Except to Parse: "selector/Combinator.json" -> "combinator with spaces around #2"
Except to Parse: "selector/Combinator.json" -> "combinator with spaces around #3"
Except to Parse: "selector/Combinator.json" -> "combinator with spaces around #4"
Except to Parse: "selector/Combinator.json" -> "descendant combinator"
Except to Parse: "selector/Combinator.json" -> "following-sibling combinator"
Except to Parse: "selector/Combinator.json" -> "legacy shadow-piercing descendant combinator"
Except to Parse: "selector/Combinator.json" -> "next-sibling combinator"
Except to Parse: "stylesheet/comment.json" -> "bad comment #1"
Except to Parse: "stylesheet/comment.json" -> "bad comment #2"
Except to Parse: "stylesheet/comment.json" -> "comment.0"
Except to Parse: "stylesheet/comment.json" -> "comment.1"
Except to Parse: "stylesheet/comment.json" -> "comment.2"
Except to Parse: "stylesheet/comment.json" -> "comment.3"
Except to Parse: "stylesheet/comment.json" -> "comment.4"
Except to Parse: "stylesheet/StyleSheet.json" -> "BOM UTF-16BE"
Except to Parse: "stylesheet/StyleSheet.json" -> "BOM UTF-16BE #2"
Except to Parse: "stylesheet/StyleSheet.json" -> "BOM UTF-16LE"
Except to Parse: "stylesheet/StyleSheet.json" -> "BOM UTF-16LE #2"
Except to Parse: "stylesheet/StyleSheet.json" -> "CDC"
Except to Parse: "stylesheet/StyleSheet.json" -> "CDO"
Except to Parse: "stylesheet/StyleSheet.json" -> "CDO/CDC"
Except to Parse: "stylesheet/StyleSheet.json" -> "comment and whitespaces only"
Except to Parse: "stylesheet/StyleSheet.json" -> "comment only"
Except to Parse: "stylesheet/StyleSheet.json" -> "empty"
Except to Parse: "stylesheet/StyleSheet.json" -> "issue #250"
Except to Parse: "stylesheet/StyleSheet.json" -> "issue111.test1"
Except to Parse: "stylesheet/StyleSheet.json" -> "issue90.test1"
Except to Parse: "stylesheet/StyleSheet.json" -> "issue90.test2"
Except to Parse: "stylesheet/StyleSheet.json" -> "rule with a bad-string token (issue #93)"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.0"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.1"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.2"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.3"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.4"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.c.0"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.s.0"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.s.1"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.s.2"
Except to Parse: "stylesheet/StyleSheet.json" -> "stylesheet.s.3"
Except to Parse: "stylesheet/StyleSheet.json" -> "whitespace only"
Except to Parse: "stylesheet/tolerant.json" -> "no block"
Except to Parse: "stylesheet/tolerant.json" -> "rule with unclosed pseudo selector"
Except to Parse: "stylesheet/tolerant.json" -> "unclosed block"
Except to Parse: "stylesheet/tolerant.json" -> "unclosed unknown functional-pseudo in selector"
Except to Parse: "stylesheet/tolerant.json" -> "uncomplete pseudo in selector"
Except to Parse: "declarationList/tolerant.json" -> "no colon after a property name"
Except to Parse: "declarationList/DeclarationList.json" -> "block.0"
Except to Parse: "declarationList/DeclarationList.json" -> "block.1"
Except to Parse: "declarationList/DeclarationList.json" -> "block.2"
Except to Parse: "declarationList/DeclarationList.json" -> "block.3"
Except to Parse: "declarationList/DeclarationList.json" -> "block.4"
Except to Parse: "declarationList/DeclarationList.json" -> "block.c.0"
Except to Parse: "declarationList/DeclarationList.json" -> "block.c.1"
Except to Parse: "declarationList/DeclarationList.json" -> "block.c.2"
Except to Parse: "declarationList/DeclarationList.json" -> "block.c.3"
Except to Parse: "declarationList/DeclarationList.json" -> "block.c.4"
Except to Parse: "declarationList/DeclarationList.json" -> "block.s.0"
Except to Parse: "declarationList/DeclarationList.json" -> "block.s.1"
Except to Parse: "declarationList/DeclarationList.json" -> "block.s.2"
Except to Parse: "declarationList/DeclarationList.json" -> "block.s.3"
Except to Parse: "declarationList/DeclarationList.json" -> "block.s.4"
Except to Parse: "declarationList/nesting.json" -> "basic"
Except to Parse: "declarationList/nesting.json" -> "don't parse nested rule when it not started with &"
Except to Parse: "declarationList/nesting.json" -> "nested @media"
Except to Parse: "value/Function.json" -> "function.0"
Except to Parse: "value/Function.json" -> "function.1"
Except to Parse: "value/Function.json" -> "function.2"
Except to Parse: "value/Function.json" -> "function.3"
Except to Parse: "value/Function.json" -> "function.4"
Except to Parse: "value/Function.json" -> "function.5"
Except to Parse: "value/Function.json" -> "function.6"
Except to Parse: "value/Function.json" -> "function.c.0"
Except to Parse: "value/Function.json" -> "function.c.1"
Except to Parse: "value/Function.json" -> "function.c.2"
Except to Parse: "value/Function.json" -> "function.c.3"
Except to Parse: "value/Function.json" -> "function.c.4"
Except to Parse: "value/Function.json" -> "function.c.5"
Except to Parse: "value/Function.json" -> "function.s.0"
Except to Parse: "value/Function.json" -> "function.s.1"
Except to Parse: "value/Function.json" -> "function.s.2"
Except to Parse: "value/Function.json" -> "function.s.3"
Except to Parse: "value/Function.json" -> "function.s.4"
Except to Parse: "value/Function.json" -> "function.s.5"
Except to Parse: "value/Function.json" -> "should allow to use vendor prefix in function name"
Except to Parse: "value/Function.json" -> "shouldn't normalize function name"
Except to Parse: "value/Function.json" -> "unclosed parentheses is not an error"
Except to Parse: "value/UnicodeRange.json" -> "a number ends with a minus"
Except to Parse: "value/UnicodeRange.json" -> "a number with a negative exponent"
Except to Parse: "value/UnicodeRange.json" -> "a single question mark"
Except to Parse: "value/UnicodeRange.json" -> "not an unicode range"
Except to Parse: "value/UnicodeRange.json" -> "unicode range hex pair"
Except to Parse: "value/UnicodeRange.json" -> "unicode range hex pair #2"
Except to Parse: "value/UnicodeRange.json" -> "unicode range hex pair number/letters"
Except to Parse: "value/UnicodeRange.json" -> "unicode range hex pair only numbers"
Except to Parse: "value/UnicodeRange.json" -> "unicode range hex pair starts with letters"
Except to Parse: "value/UnicodeRange.json" -> "unicode range hex with ?"
Except to Parse: "value/UnicodeRange.json" -> "unicode range one hex"
Except to Parse: "value/UnicodeRange.json" -> "unicode range short hex pair"
Except to Parse: "value/Value.json" -> "should parse a custom property value when parseCustomProperty is true"
Except to Parse: "value/Value.json" -> "value.1"
Except to Parse: "value/Value.json" -> "value.2"
Except to Parse: "value/Value.json" -> "value.4"
Except to Parse: "value/Value.json" -> "value.rgb.0"
Except to Parse: "value/Value.json" -> "value.rgb.1"
Except to Parse: "value/Value.json" -> "value.rgb.2"
Except to Parse: "value/Percentage.json" -> "percentage.0"
Except to Parse: "value/Percentage.json" -> "percentage.1"
Except to Parse: "value/Percentage.json" -> "percentage.2"
Except to Parse: "value/Percentage.json" -> "percentage.3"
Except to Parse: "value/Dimension.json" -> "IE hack"
Except to Parse: "value/Dimension.json" -> "dimension #0"
Except to Parse: "value/Dimension.json" -> "dimension #1"
Except to Parse: "value/Dimension.json" -> "dimension #2"
Except to Parse: "value/Dimension.json" -> "dimension #3"
Except to Parse: "value/Parentheses.json" -> "parentheses.0"
Except to Parse: "value/Parentheses.json" -> "parentheses.1"
Except to Parse: "value/Parentheses.json" -> "parentheses.2"
Except to Parse: "value/Parentheses.json" -> "parentheses.3"
Except to Parse: "value/Parentheses.json" -> "parentheses.9"
Except to Parse: "value/Parentheses.json" -> "parentheses.c.0"
Except to Parse: "value/Parentheses.json" -> "parentheses.c.1"
Except to Parse: "value/Parentheses.json" -> "parentheses.c.2"
Except to Parse: "value/Parentheses.json" -> "parentheses.c.3"
Except to Parse: "value/Parentheses.json" -> "parentheses.s.0"
Except to Parse: "value/Parentheses.json" -> "parentheses.s.1"
Except to Parse: "value/Parentheses.json" -> "parentheses.s.2"
Except to Parse: "value/Parentheses.json" -> "parentheses.s.3"
Except to Parse: "value/Parentheses.json" -> "unclosed parentheses is not an error"
Except to Parse: "value/function/expression.json" -> "expression #0"
Except to Parse: "value/function/expression.json" -> "expression #1"
Except to Parse: "value/function/expression.json" -> "expression #2"
Except to Parse: "value/function/expression.json" -> "expression #3"
Except to Parse: "value/function/expression.json" -> "expression #4"
Except to Parse: "value/function/expression.json" -> "expression #5"
Except to Parse: "value/function/expression.json" -> "expression #6"
Except to Parse: "value/function/expression.json" -> "expression #8"
Except to Parse: "value/function/var.json" -> "basic"
Except to Parse: "value/function/var.json" -> "complex balanced"
Except to Parse: "value/function/var.json" -> "empty fallback"
Except to Parse: "value/function/var.json" -> "empty fallback (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "falback is {}-block"
Except to Parse: "value/function/var.json" -> "only comments (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "should be a error here (since unmatched tokens are disallowed), but ok for now"
Except to Parse: "value/function/var.json" -> "should ignore everything inside falback's block"
Except to Parse: "value/function/var.json" -> "should parse a fallback value when parseCustomProperty is true"
Except to Parse: "value/function/var.json" -> "should preserve single spaces"
Except to Parse: "value/function/var.json" -> "should preserve single spaces (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "spaces and comments"
Except to Parse: "value/function/var.json" -> "spaces and comments #2 (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "spaces and comments #3 (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "spaces and comments #4 (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "spaces and comments (parseCustomProperty:true)"
Except to Parse: "value/function/var.json" -> "unclosed var() is not an error"
Except to Parse: "value/function/var.json" -> "with fallback"
Except to Parse: "value/function/calc.json" -> "basic"
Except to Parse: "value/function/calc.json" -> "custom property"
Except to Parse: "value/function/calc.json" -> "nested"
Except to Parse: "value/function/calc.json" -> "with dimension and percentage"
Except to Parse: "value/function/element.json" -> "-moz-element"
Except to Parse: "value/function/element.json" -> "base test"
Except to Parse: "value/function/element.json" -> "should be case insensitive"
Except to Parse: "value/function/element.json" -> "spaces and comment"
Except to Parse: "value/Number.json" -> "not an error #1"
Except to Parse: "value/Number.json" -> "not an error #2"
Except to Parse: "value/Number.json" -> "number.0"
Except to Parse: "value/Number.json" -> "number.1"
Except to Parse: "value/Number.json" -> "number.2"
Except to Parse: "value/Number.json" -> "number.3"
Except to Parse: "value/Number.json" -> "number.4"
Except to Parse: "value/Number.json" -> "number.5"
Except to Parse: "value/Number.json" -> "number.6"
Except to Parse: "value/Number.json" -> "number.7"
Except to Parse: "value/Number.json" -> "with exponent #1"
Except to Parse: "value/Number.json" -> "with exponent #2"
Except to Parse: "value/Number.json" -> "with exponent #3"
Except to Parse: "value/Number.json" -> "with exponent #4"
Except to Parse: "value/Number.json" -> "with exponent #5"
Except to Parse: "value/Number.json" -> "with exponent #6"
Except to Parse: "value/Number.json" -> "with sign #1"
Except to Parse: "value/Number.json" -> "with sign #2"
Except to Parse: "value/Number.json" -> "with sign #3"
Except to Parse: "value/Number.json" -> "with sign #4"
Except to Parse: "value/Number.json" -> "with sign #5"
Except to Parse: "value/String.json" -> "string with escaped \\n"
Except to Parse: "value/String.json" -> "string with escaped \\r"
Except to Parse: "value/String.json" -> "string with escaped \\r\\n"
Except to Parse: "value/String.json" -> "string.0"
Except to Parse: "value/String.json" -> "string.1"
Except to Parse: "value/String.json" -> "string.2"
Except to Parse: "value/String.json" -> "string.3"
Except to Parse: "value/Url.json" -> "uri escaping"
Except to Parse: "value/Url.json" -> "uri with parentheses"
Except to Parse: "value/Url.json" -> "uri with parentheses in string"
Except to Parse: "value/Url.json" -> "uri with special symbols"
Except to Parse: "value/Url.json" -> "uri.0"
Except to Parse: "value/Url.json" -> "uri.1"
Except to Parse: "value/Url.json" -> "uri.c.1"
Except to Parse: "value/Url.json" -> "uri.s.0"
Except to Parse: "value/Url.json" -> "uri.s.1"
Except to Parse: "value/Brackets.json" -> "empty"
Except to Parse: "value/Brackets.json" -> "multiple identifier"
Except to Parse: "value/Brackets.json" -> "single identifier"
Except to Parse: "value/Brackets.json" -> "unclosed brakets is not an error"
Except to Parse: "value/Identifier.json" -> "ident #0"
Except to Parse: "value/Identifier.json" -> "ident name starts with minus"
Except to Parse: "rule/Rule.json" -> "declaration with //"
Except to Parse: "rule/Rule.json" -> "ruleset.0"
Except to Parse: "rule/Rule.json" -> "ruleset.1"
Except to Parse: "rule/Rule.json" -> "ruleset.2"
Except to Parse: "rule/Rule.json" -> "ruleset.3"
Except to Parse: "rule/Rule.json" -> "ruleset.4"
Except to Parse: "rule/Rule.json" -> "ruleset.5"
Except to Parse: "rule/Rule.json" -> "ruleset.c.0"
Except to Parse: "rule/Rule.json" -> "ruleset.c.1"
Except to Parse: "rule/Rule.json" -> "ruleset.c.2"
Except to Parse: "rule/Rule.json" -> "ruleset.c.3"
Except to Parse: "rule/Rule.json" -> "ruleset.s.0"
Except to Parse: "rule/Rule.json" -> "ruleset.s.1"
Except to Parse: "rule/Rule.json" -> "ruleset.s.2"
Except to Parse: "rule/Rule.json" -> "ruleset.s.3"
Except to Parse: "rule/Rule.json" -> "ruleset.s.4"
Except to Parse: "rule/Rule.json" -> "ruleset.s.5"
Except to Parse: "rule/Rule.json" -> "ruleset.s.6"
Except to Parse: "rule/Rule.json" -> "shouldn't parse a selector when parseRulePrelude is false"
Except to Parse: "rule/Rule.json" -> "value.color.ident.0"
Except to Parse: "rule/Rule.json" -> "value.color.ident.1"
Except to Parse: "rule/nested-atrule.json" -> "basic"
Except to Parse: "rule/nested-atrule.json" -> "recursion"
Except to Parse: "rule/nested-atrule.json" -> "with block"
Except to Parse: "rule/nested-atrule.json" -> "with prelude"
Except to Parse: "rule/tolerant.json" -> "bad selector"
Except to Parse: "rule/nesting.json" -> "basic"
Except to Parse: "rule/nesting.json" -> "don't parse nested rule when it not started with &"
Except to Parse: "rule/nesting.json" -> "nested @media"
Except to Parse: "rule/nesting.json" -> "nested @supports"
Except to Parse: "mediaQuery/MediaQuery.json" -> "boolean media feature"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with comments"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with dimension value"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with identifier value"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with number value"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with ratio"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with ratio and spaces"
Except to Parse: "mediaQuery/MediaQuery.json" -> "media feature with spaces"
Except to Parse: "mediaQuery/MediaQuery.json" -> "number with \\0 hack"
Except to Parse: "mediaQuery/MediaQuery.json" -> "vendor media feature"
Except to Parse: "mediaQuery/Ratio.json" -> "basic ratio"
Except to Parse: "selectorList/Selector.json" -> "several selectors"
Except to Parse: "selectorList/Selector.json" -> "single selector"
Except to Parse: "atrulePrelude/index.json" -> "base test"
Except to Parse: "atrulePrelude/index.json" -> "should use custom parser"
Except to Parse: "atrule/block.json" -> "@page"
Except to Parse: "atrule/block.json" -> "block at-rule #0"
Except to Parse: "atrule/block.json" -> "block at-rule #1"
Except to Parse: "atrule/block.json" -> "block at-rule #2"
Except to Parse: "atrule/block.json" -> "block at-rule #c.0"
Except to Parse: "atrule/block.json" -> "block at-rule #c.1"
Except to Parse: "atrule/block.json" -> "block at-rule #c.2"
Except to Parse: "atrule/block.json" -> "block at-rule #s.0"
Except to Parse: "atrule/block.json" -> "block at-rule #s.1"
Except to Parse: "atrule/block.json" -> "block at-rule #s.2"
Except to Parse: "atrule/block.json" -> "empty block at-rule"
Except to Parse: "atrule/block.json" -> "should turn empty prelude to null"
Except to Parse: "atrule/block.json" -> "shouldn't create a raw node when no prelude and parseAtrulePrelude is false"
Except to Parse: "atrule/block.json" -> "shouldn't parse a atrule prelude when parseAtrulePrelude is false"
Except to Parse: "atrule/stylesheet.json" -> "atruler.0"
Except to Parse: "atrule/stylesheet.json" -> "atruler.1"
Except to Parse: "atrule/stylesheet.json" -> "atruler.3"
Except to Parse: "atrule/stylesheet.json" -> "atruler.4"
Except to Parse: "atrule/stylesheet.json" -> "atruler.c.0"
Except to Parse: "atrule/stylesheet.json" -> "atruler.c.1"
Except to Parse: "atrule/stylesheet.json" -> "atruler.c.2"
Except to Parse: "atrule/stylesheet.json" -> "atruler.s.0"
Except to Parse: "atrule/stylesheet.json" -> "atruler.s.1"
Except to Parse: "atrule/stylesheet.json" -> "atruler.s.2"
Except to Parse: "atrule/stylesheet.json" -> "webkit.keyfraymes.0"
Except to Parse: "atrule/no-block.json" -> "atkeyword.1"
Except to Parse: "atrule/no-block.json" -> "atrules.0"
Except to Parse: "atrule/no-block.json" -> "atrules.1"
Except to Parse: "atrule/no-block.json" -> "atrules.2"
Except to Parse: "atrule/no-block.json" -> "atrules.3"
Except to Parse: "atrule/no-block.json" -> "atrules.c.0"
Except to Parse: "atrule/no-block.json" -> "atrules.c.1"
Except to Parse: "atrule/no-block.json" -> "atrules.s.0"
Except to Parse: "atrule/no-block.json" -> "atrules.s.1"
Except to Parse: "atrule/no-block.json" -> "no at-rule ending on eof is not an error"
Except to Parse: "atrule/no-block.json" -> "should turn empty prelude to null"
Except to Parse: "atrule/no-block.json" -> "shouldn't create a raw node when no prelude and parseAtrulePrelude is false"
Except to Parse: "atrule/no-block.json" -> "shouldn't parse a atrule prelude when parseAtrulePrelude is false"
Except to Parse: "atrule/tolerant.json" -> "at-rule (known) may have any content in prelude"
Except to Parse: "atrule/tolerant.json" -> "at-rule (known) may have no a semicolon"
Except to Parse: "atrule/tolerant.json" -> "at-rule (known) with custom prelude parser"
Except to Parse: "atrule/tolerant.json" -> "at-rule (known) with no block may be followed by block"
Except to Parse: "atrule/tolerant.json" -> "at-rule (unknown) may have any content in prelude"
Except to Parse: "atrule/tolerant.json" -> "at-rule (unknown) may have no a semicolon"
Except to Parse: "atrule/tolerant.json" -> "unclosed block - known declaration at-rule"
Except to Parse: "atrule/tolerant.json" -> "unclosed block - known rule at-rule"
Except to Parse: "atrule/tolerant.json" -> "unclosed block - unknown at-rule"
Except to Parse: "atrule/atrule/import.json" -> "@import with block is not an error"
Except to Parse: "atrule/atrule/import.json" -> "should be case insensetive"
Except to Parse: "atrule/atrule/import.json" -> "white spaces and comment should not affect prelude consuming"
Except to Parse: "atrule/atrule/import.json" -> "with media"
Except to Parse: "atrule/atrule/import.json" -> "with string"
Except to Parse: "atrule/atrule/import.json" -> "with url"
Except to Parse: "atrule/atrule/media.json" -> "@media with no block is not an error"
Except to Parse: "atrule/atrule/media.json" -> "@media with no prelude is not an error"
Except to Parse: "atrule/atrule/media.json" -> "should be case insensitive"
Except to Parse: "atrule/atrule/media.json" -> "shouldn't parse an at-rule prelude when parseAtrulePrelude is false"
Except to Parse: "atrule/atrule/media.json" -> "single media type"
Except to Parse: "atrule/atrule/media.json" -> "single media type with negation"
Except to Parse: "atrule/atrule/media.json" -> "single media type with only"
Except to Parse: "atrule/atrule/supports.json" -> "@supports with no block"
Except to Parse: "atrule/atrule/supports.json" -> "@supports with no block is not an error"
Except to Parse: "atrule/atrule/supports.json" -> "@supports with no prelude is not an error"
Except to Parse: "atrule/atrule/supports.json" -> "base test"
Except to Parse: "atrule/atrule/supports.json" -> "base test with comments"
Except to Parse: "atrule/atrule/supports.json" -> "base test with spaces"
Except to Parse: "atrule/atrule/supports.json" -> "complex prelude"
Except to Parse: "atrule/atrule/supports.json" -> "custom property"
Except to Parse: "atrule/atrule/supports.json" -> "should be case insensitive"
Except to Parse: "atrule/atrule/supports.json" -> "simple supports with negation"
Except to Parse: "atrule/atrule/supports.json" -> "using !important"
Except to Parse: "atrule/atrule/supports.json" -> "using function"
Except to Parse: "atrule/atrule/supports.json" -> "vendor property"
Except to Parse: "atrule/atrule/font-face.json" -> "@font-face with declaration looks like a rule in block"
Except to Parse: "atrule/atrule/font-face.json" -> "@font-face with no block is not an error"
Except to Parse: "atrule/atrule/font-face.json" -> "@font-face with prelude is not an error"
Except to Parse: "atrule/atrule/font-face.json" -> "several declarations"
Except to Parse: "atrule/atrule/font-face.json" -> "single declaration"
Except to Parse: "atrule/atrule/nest.json" -> "single media type"
Except to Parse: "block/Block.json" -> "at-rule in block"
Except to Parse: "block/Block.json" -> "at-rule in the ending of block"
Except to Parse: "block/Block.json" -> "at-rule with block in block"
Except to Parse: "block/Block.json" -> "at-rule with block in the ending of block"
Except to Parse: "block/Block.json" -> "block.0"
Except to Parse: "block/Block.json" -> "block.1"
Except to Parse: "block/Block.json" -> "block.2"
Except to Parse: "block/Block.json" -> "block.3"
Except to Parse: "block/Block.json" -> "block.4"
Except to Parse: "block/Block.json" -> "block.c.0"
Except to Parse: "block/Block.json" -> "block.c.1"
Except to Parse: "block/Block.json" -> "block.c.2"
Except to Parse: "block/Block.json" -> "block.c.3"
Except to Parse: "block/Block.json" -> "block.c.4"
Except to Parse: "block/Block.json" -> "block.s.0"
Except to Parse: "block/Block.json" -> "block.s.1"
Except to Parse: "block/Block.json" -> "block.s.2"
Except to Parse: "block/Block.json" -> "block.s.3"
Except to Parse: "block/Block.json" -> "block.s.4"
Except to Parse: "block/tolerant.json" -> "bad symbol in a property name"
Except to Parse: "block/tolerant.json" -> "bad value"
Except to Parse: "block/tolerant.json" -> "no colon after a property name"
Except to Parse: "block/tolerant.json" -> "unclosed block"
Except to Parse: "block/tolerant.json" -> "uncomplete !important"
Except to Parse: "declaration/filter.json" -> "alpha()"
Except to Parse: "declaration/filter.json" -> "alpha() case insensetive"
Except to Parse: "declaration/filter.json" -> "chroma()"
Except to Parse: "declaration/filter.json" -> "dropshadow()"
Except to Parse: "declaration/filter.json" -> "filter.0"
Except to Parse: "declaration/filter.json" -> "filter.1"
Except to Parse: "declaration/filter.json" -> "filter.2"
Except to Parse: "declaration/filter.json" -> "filter.3"
Except to Parse: "declaration/filter.json" -> "filter.4"
Except to Parse: "declaration/filter.json" -> "filter.5"
Except to Parse: "declaration/filter.json" -> "filter.c.0"
Except to Parse: "declaration/filter.json" -> "filter.c.1"
Except to Parse: "declaration/filter.json" -> "filter.s.0"
Except to Parse: "declaration/filter.json" -> "filter.s.1"
Except to Parse: "declaration/filter.json" -> "filter.s.2"
Except to Parse: "declaration/filter.json" -> "unclosed functions should not be invalid per spec, not sure it's true for IE (need to be check and fail may be)"
Except to Parse: "declaration/Declaration.json" -> "declaration property with # hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with $ hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with & hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with * hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with + hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with / hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with // hack"
Except to Parse: "declaration/Declaration.json" -> "declaration property with _ hack"
Except to Parse: "declaration/Declaration.json" -> "declaration.0"
Except to Parse: "declaration/Declaration.json" -> "declaration.1"
Except to Parse: "declaration/Declaration.json" -> "declaration.c.0"
Except to Parse: "declaration/Declaration.json" -> "declaration.c.1"
Except to Parse: "declaration/Declaration.json" -> "declaration.c.2"
Except to Parse: "declaration/Declaration.json" -> "declaration.c.3"
Except to Parse: "declaration/Declaration.json" -> "declaration.s.0"
Except to Parse: "declaration/Declaration.json" -> "declaration.s.1"
Except to Parse: "declaration/Declaration.json" -> "declaration.s.2"
Except to Parse: "declaration/Declaration.json" -> "declaration.s.3"
Except to Parse: "declaration/Declaration.json" -> "shouldn't include !important into a value when parseValue is false"
Except to Parse: "declaration/Declaration.json" -> "shouldn't include !important into a value when parseValue is false (brackets)"
Except to Parse: "declaration/Declaration.json" -> "shouldn't include !important into a value when parseValue is false (function)"
Except to Parse: "declaration/Declaration.json" -> "shouldn't include !important into a value when parseValue is false (w/o whitespaces)"
Except to Parse: "declaration/Declaration.json" -> "shouldn't parse a value when parseValue is false"
Except to Parse: "declaration/custom-property.json" -> "basic"
Except to Parse: "declaration/custom-property.json" -> "complex balanced"
Except to Parse: "declaration/custom-property.json" -> "double dash is a valid property name"
Except to Parse: "declaration/custom-property.json" -> "empty"
Except to Parse: "declaration/custom-property.json" -> "empty (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "empty with important"
Except to Parse: "declaration/custom-property.json" -> "empty with important (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "only a comment"
Except to Parse: "declaration/custom-property.json" -> "only a comment (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "should ignore everything inside block"
Except to Parse: "declaration/custom-property.json" -> "should parse a custom property value when parseCustomProperty is true"
Except to Parse: "declaration/custom-property.json" -> "should preserve single spaces"
Except to Parse: "declaration/custom-property.json" -> "should preserve single spaces (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "should preserve single spaces with important"
Except to Parse: "declaration/custom-property.json" -> "should preserve single spaces with important (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "spaces and comments"
Except to Parse: "declaration/custom-property.json" -> "spaces and comments #2 (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "spaces and comments #3 (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "spaces and comments (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "value is {}-block"
Except to Parse: "declaration/custom-property.json" -> "whitespace beetween comments (parseCustomProperty:true)"
Except to Parse: "declaration/custom-property.json" -> "with important"
Except to Parse: "declaration/custom-property.json" -> "with parentheses and important"
Except to Parse: "declaration/Important.json" -> "\\9 hack"
Except to Parse: "declaration/Important.json" -> "divided by comment"
Except to Parse: "declaration/Important.json" -> "divided by spaces"
Except to Parse: "declaration/Important.json" -> "divided by spaces and comments"
